import json
from agent.retriever_builder import build_retrievers

with open("labeled_pairs.json", "r", encoding="utf-8") as f:
    labeled_pairs = json.load(f)

retrievers = build_retrievers(labeled_pairs)
per_rubric_retrievers = retrievers["per_rubric_retrievers"]
fallback_retriever = retrievers["fallback_retriever"]

def retrieve_fewshot_examples_node(state: dict) -> dict:
    print("<üîé –†–ï–¢–†–ò–í –ü–û–•–û–ñ–ò–• –ü–†–ò–ú–ï–†–û–í –ò–ó –¢–û–ô –ñ–ï –ö–ê–¢–ï–ì–û–†–ò–ò ... >")

    query = state["query"]
    rubric_name = state["normalized_main_rubric_name_ru"]

    search_text = f"–ó–∞–ø—Ä–æ—Å: {query}. –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {rubric_name}"
    retriever = per_rubric_retrievers.get(rubric_name)

    if retriever:
        nodes = retriever.retrieve(search_text)
        if not nodes:
            print("[INFO] –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ —Ä—É–±—Ä–∏–∫–µ ‚Äî fallback –∫–æ –≤—Å–µ–º –¥–æ–∫—É–º–µ–Ω—Ç–∞–º")
            nodes = fallback_retriever.retrieve(search_text)
    else:
        print("[INFO] –ù–µ—Ç —Ä–µ—Ç—Ä–∏–≤–µ—Ä–∞ –¥–ª—è —Ä—É–±—Ä–∏–∫–∏ ‚Äî fallback –∫–æ –≤—Å–µ–º –¥–æ–∫—É–º–µ–Ω—Ç–∞–º")
        nodes = fallback_retriever.retrieve(search_text)

    parsed_examples = []
    for node in nodes:
        text = node.text
        assessor_label = node.metadata.get("assessor_label", "NEED_MORE_INFO")

        q, o, r = "unknown", "unknown", rubric_name
        if "–ó–∞–ø—Ä–æ—Å:" in text and "–û—Ç–≤–µ—Ç:" in text:
            try:
                q = text.split("–ó–∞–ø—Ä–æ—Å:")[1].split("–û—Ç–≤–µ—Ç:")[0].strip().rstrip(".")
                o = text.split("–û—Ç–≤–µ—Ç:")[1].split("–ö–∞—Ç–µ–≥–æ—Ä–∏—è:")[0].strip().rstrip(".")
                r = text.split("–ö–∞—Ç–µ–≥–æ—Ä–∏—è:")[1].strip()
            except:
                pass

        parsed_examples.append({
            "query": q,
            "org_text": o,
            "normalized_main_rubric_name_ru": r,
            "assessor_label": assessor_label
        })

    return {
        **state,
        "retrieved_fewshot_examples": parsed_examples,
        "step_count": state.get("step_count", 0) + 1
    }
