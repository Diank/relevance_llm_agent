from typing import Union, Dict
from langchain.prompts import ChatPromptTemplate
from agent.model import llm


FILTER_REVIEWS_PROMPT = """
Отфильтруй список отзывов ниже. Оставь **только информативные упоминания**, которые помогают понять, какими товарами, услугами или особенностями обладает организация.

❌ Удали записи, которые:
- Содержат только общее мнение: «понравилось», «всё супер», «хорошее место», «рекомендую»
- Представляют собой мета-описания: «Пользователь хвалит…», «Суммаризация…»
- Не дают конкретной информации об услугах, товарах, атмосфере, месте, ценах и т.п.
- Содержат слова «Хвалят», «Критикуют», «Положительный отзыв», «Отрицательный отзыв», «Отмечают», «Жалуются» — замени их на конкретное утверждение без этих слов.

✅ Оставь отзывы, если в них есть:
- Упоминание конкретных **услуг** (установка забора, чистка зубов, доставка суши и т.д.)
- Упоминание **товаров** (том ям, пицца, кофе, лимонад и т.п.)
- Информация о **ценах** (дорого, недорого, разумные цены)
- Упоминание **атмосферы** («уютно», «романтично», «подходит для свидания»)
- Описание **расположения** или удобства: парковка, центр города, рядом с метро
- Упоминание особенностей работы: график, скорость обслуживания, долгие очереди и т.п.

Сгруппируй похожие упоминания и убери повторения.

Выведи результат в двух разделах:

Плюсы: [перечисли через точку с запятой, без повторений]

Минусы: [перечисли через точку с запятой, без повторений]

---

Примеры:

Вместо:
- Хвалят музыку и меню
- Хвалят атмосферу и живую музыку
- Хвалят кухню, обслуживание и музыку

Оставь:
Плюсы: живая музыка; кухня; обслуживание

Вместо:
- Критикуют вкус еды
- Положительная оценка утреннего меню

Оставь:
Плюсы: утреннее меню
Минусы: вкус еды плохой

---

Теперь отфильтруй список ниже, сохранив **только содержательные фразы**, разделённые на плюсы и минусы:

Ответь строго в формате:

Плюсы: ...
Минусы: ...

Без дополнительных комментариев.

{reviews}

"""

def filter_reviews(reviews: str) -> str:
    """Очищает отзывы через LLM."""
    if not reviews or reviews.strip() in {"Информация отсутствует", "..."}:
        return reviews

    prompt_template = ChatPromptTemplate.from_template(FILTER_REVIEWS_PROMPT)
    messages = prompt_template.format_messages(reviews=reviews)

    result = llm.invoke(messages).content.strip()
    return result


def build_org_text(data: Union[Dict, tuple, list]) -> str:
    """Собирает текст организации."""
    if isinstance(data, dict):
        parts = [
            data.get("name", ""),
            data.get("address", ""),
            data.get("prices_summarized", ""),
            data.get("reviews_summarized", ""),
        ]
    else:
        name, address, prices, reviews = data
        parts = [name, address, prices, reviews]

    return ", ".join(
        p.strip() for p in parts
        if p and p.strip() not in {"Информация отсутствует", "..."}
    )
